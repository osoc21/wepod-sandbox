{"version":3,"sources":["node_modules/n3/src/IRIs.js","node_modules/queue-microtask/index.js","node_modules/n3/src/N3Lexer.js","node_modules/n3/src/N3Util.js","node_modules/n3/src/N3DataFactory.js","node_modules/n3/src/N3Parser.js","node_modules/n3/src/N3Writer.js","node_modules/n3/src/N3Store.js","node_modules/n3/src/N3StreamParser.js","node_modules/n3/src/N3StreamWriter.js","node_modules/n3/src/index.js","node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["RDF","XSD","SWAP","xsd","decimal","boolean","double","integer","string","rdf","type","nil","first","rest","langString","owl","sameAs","r","forSome","forAll","log","implies","namespaces","escapeSequence","escapeReplacements","illegalIriChars","lineModeRegExps","_iri","_unescapedIri","_simpleQuotedString","_langcode","_blank","_newline","_comment","_whitespace","_endOfFile","invalidRegExp","N3Lexer","constructor","options","_simpleApostropheString","_prefix","_prefixed","_variable","_number","_boolean","_keyword","_sparqlKeyword","_shortPredicates","_lineMode","lineMode","_n3Mode","key","RegExp","n3","_comments","comments","_literalClosingPos","_tokenizeToEnd","callback","inputFinished","input","_input","outputComments","whiteSpaceMatch","comment","exec","line","_line","value","prefix","substr","length","test","firstChar","match","matchLength","inconclusive","_previousMarker","_unescape","reportSyntaxError","_parseLiteral","toUpperCase","token","previousToken","self","_syntaxError","item","invalid","replaced","replace","sequence","unicode4","unicode8","escapedChar","String","fromCharCode","Number","parseInt","charCode","opening","openingLength","closingPos","Math","max","indexOf","backslashCount","raw","substring","lines","split","issue","err","Error","context","undefined","tokenize","tokens","error","e","t","push","_pendingBuffer","setEncoding","on","data","Buffer","concat","isNamedNode","term","termType","isBlankNode","isLiteral","isVariable","isDefaultGraph","inDefaultGraph","quad","graph","iri","factory","prefixes","defaultPrefixes","Object","create","processPrefix","N3DataFactory","cache","local","namedNode","DEFAULTGRAPH","_blankNodeCounter","escapedLiteral","quadId","DataFactory","blankNode","variable","literal","defaultGraph","triple","Term","id","equals","other","toJSON","NamedNode","Literal","lastIndexOf","language","atPos","toLowerCase","datatype","datatypeString","dtPos","char","BlankNode","name","Variable","DefaultGraph","termFromId","endPos","components","unescapeQuotes","termToId","escapeQuotes","subject","predicate","object","Quad","_","quoted","languageOrDataType","isFinite","isInteger","isNaN","blankNodePrefix","N3Parser","_contextStack","_graph","_setBase","baseIRI","initDataFactory","format","isTurtle","isTriG","isNTriples","isNQuads","isN3","isLineMode","_supportsNamedGraphs","_readPredicateOrNamedGraph","_readPredicate","_supportsQuads","_supportsRDFStar","_resolveRelativeIRI","_blankNodePrefix","_lexer","lexer","_explicitQuantifiers","explicitQuantifiers","_resetBlankNodePrefix","_base","_basePath","fragmentPos","_baseRoot","_baseScheme","_saveContext","n3Mode","inverse","_inversePredicate","blankPrefix","_prefixes","quantified","_quantified","_restoreContext","pop","_subject","_predicate","_object","_readInTopContext","_error","_callback","_sparqlStyle","_readPrefix","_readBaseIRI","_readSubject","_readNamedGraphLabel","_readEntity","quantifier","_resolveIRI","_namedNode","_blankNode","_readBlankNodeHead","RDF_NIL","_readListItem","_readPunctuation","N3_FORSOME","_quantifier","_readQuantifierList","N3_FORALL","_literalValue","_completeSubjectLiteral","_literal","_getPathReader","ABBREVIATIONS","_readBlankNodeTail","_readObject","_readDataTypeOrLang","_getContextEndReader","_readGraph","_readBlankNodePunctuation","_emit","empty","_readPredicateAfterBlank","list","next","previousList","stack","parent","RDF_FIRST","_readListItemDataTypeOrLang","RDF_REST","_completeObjectLiteral","_completeLiteral","listItem","completed","_readCallback","_readFormulaTail","inversePredicate","_readQuadPunctuation","_readPrefixIRI","prefixNode","_prefixCallback","_readDeclarationPunctuation","_readNamedGraphBlankLabel","entity","QUANTIFIERS_GRAPH","_readQuantifierPunctuation","afterPath","_afterPath","_readPath","_readForwardPath","_readBackwardPath","_readRDFStarTailOrGraph","_readRDFStarTail","_quad","contextStack","message","noop","_removeDotSegments","result","i","pathStart","segmentStart","parse","quadCallback","prefixCallback","quads","every","parser","prototype","escape","escapeAll","escapedCharacters","SerializedTerm","N3Writer","outputStream","_prefixRegex","write","_lists","lists","output","_outputStream","chunk","encoding","done","end","_endStream","_baseIRI","_prefixIRIs","addPrefixes","_writeQuad","_writeQuadLine","_inDefaultGraph","_write","_encodeIriOrBlank","_encodeObject","_encodePredicate","_encodeSubject","_prefixMatch","quadToString","quadsToString","map","join","_encodeQuad","startsWith","characterReplacer","prefixMatch","_encodeLiteral","_blockedWrite","addQuad","addQuads","addPrefix","hasPrefixes","IRIlist","prefixList","prefixIRI","blank","children","child","contents","elements","Array","singleDone","character","charCodeAt","toString","N3Store","_size","_graphs","_id","_ids","_entities","_blankNodeIndex","_factory","size","graphs","subjects","graphKey","subjectKey","predicateKey","keys","_addToIndex","index0","key0","key1","key2","index1","index2","existed","_removeFromIndex","_findInIndex","name0","name1","name2","array","tmp","varCount","entityKeys","value0","entity0","value1","entity1","values","l","parts","_loop","_loopByKey0","_loopByKey1","_loopBy2Keys","_countInIndex","count","_getGraphs","isString","_uniqueEntities","uniqueIds","graphItem","predicates","objects","freeze","ids","entities","changed","import","stream","removeQuad","removeQuads","remove","removeMatches","deleteGraph","getQuads","content","subjectId","predicateId","objectId","graphId","Readable","objectMode","_read","countQuads","forEach","some","getSubjects","results","forSubjects","s","getPredicates","forPredicates","p","getObjects","forObjects","o","getGraphs","forGraphs","g","createBlankNode","suggestedName","index","extractLists","ignoreErrors","onError","node","tails","toRemove","tailQuad","items","malformed","head","headPos","current","objectQuads","subjectQuads","unshift","N3StreamParser","Transform","decodeStrings","_readableState","onData","onEnd","event","emit","uri","_transform","_flush","N3StreamWriter","writableObjectMode","writer","_writer","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","JSON","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","generated","js","console","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","overlay","createErrorOverlay","document","body","appendChild","getElementById","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","isArray","Function","deps","cached","cb"],"mappings":"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","file":"src.b20bf42d.js","sourceRoot":"..","sourcesContent":["const RDF  = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n    XSD  = 'http://www.w3.org/2001/XMLSchema#',\n    SWAP = 'http://www.w3.org/2000/10/swap/';\n\nexport default {\n  xsd: {\n    decimal: `${XSD}decimal`,\n    boolean: `${XSD}boolean`,\n    double:  `${XSD}double`,\n    integer: `${XSD}integer`,\n    string:  `${XSD}string`,\n  },\n  rdf: {\n    type:       `${RDF}type`,\n    nil:        `${RDF}nil`,\n    first:      `${RDF}first`,\n    rest:       `${RDF}rest`,\n    langString: `${RDF}langString`,\n  },\n  owl: {\n    sameAs: 'http://www.w3.org/2002/07/owl#sameAs',\n  },\n  r: {\n    forSome: `${SWAP}reify#forSome`,\n    forAll:  `${SWAP}reify#forAll`,\n  },\n  log: {\n    implies: `${SWAP}log#implies`,\n  },\n};\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","// **N3Lexer** tokenizes N3 documents.\nimport namespaces from './IRIs';\nimport queueMicrotask from 'queue-microtask';\n\nconst { xsd } = namespaces;\n\n// Regular expression and replacement string to escape N3 strings\nconst escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\([^])/g;\nconst escapeReplacements = {\n  '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\n  'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',\n  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',\n  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',\n  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',\n};\nconst illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\n\nconst lineModeRegExps = {\n  _iri: true,\n  _unescapedIri: true,\n  _simpleQuotedString: true,\n  _langcode: true,\n  _blank: true,\n  _newline: true,\n  _comment: true,\n  _whitespace: true,\n  _endOfFile: true,\n};\nconst invalidRegExp = /$0^/;\n\n// ## Constructor\nexport default class N3Lexer {\n  constructor(options) {\n    // ## Regular expressions\n    // It's slightly faster to have these as properties than as in-scope variables\n    this._iri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/; // IRI with escape sequences; needs sanity check after unescaping\n    this._unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/; // IRI without escape sequences; no unescaping\n    this._simpleQuotedString = /^\"([^\"\\\\\\r\\n]*)\"(?=[^\"])/; // string without escape sequences\n    this._simpleApostropheString = /^'([^'\\\\\\r\\n]*)'(?=[^'])/;\n    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i;\n    this._prefix = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/;\n    this._prefixed = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?:[ \\t]+|(?=\\.?[,;!\\^\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._variable = /^\\?(?:(?:[A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=[.,;!\\^\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._blank = /^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?:[ \\t]+|(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._number = /^[\\-+]?(?:(\\d+\\.\\d*|\\.?\\d+)[eE][\\-+]?|\\d*(\\.)?)\\d+(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._boolean = /^(?:true|false)(?=[.,;\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._keyword = /^@[a-z]+(?=[\\s#<:])/i;\n    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\\s#<])/i;\n    this._shortPredicates = /^a(?=[\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._newline = /^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/;\n    this._comment = /#([^\\n\\r]*)/;\n    this._whitespace = /^[ \\t]+/;\n    this._endOfFile = /^(?:#[^\\n\\r]*)?$/;\n    options = options || {};\n\n    // In line mode (N-Triples or N-Quads), only simple features may be parsed\n    if (this._lineMode = !!options.lineMode) {\n      this._n3Mode = false;\n      // Don't tokenize special literals\n      for (const key in this) {\n        if (!(key in lineModeRegExps) && this[key] instanceof RegExp)\n          this[key] = invalidRegExp;\n      }\n    }\n    // When not in line mode, enable N3 functionality by default\n    else {\n      this._n3Mode = options.n3 !== false;\n    }\n    // Don't output comment tokens by default\n    this._comments = !!options.comments;\n    // Cache the last tested closing position of long literals\n    this._literalClosingPos = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback\n  _tokenizeToEnd(callback, inputFinished) {\n    // Continue parsing as far as possible; the loop will return eventually\n    let input = this._input;\n    const outputComments = this._comments;\n    while (true) {\n      // Count and skip whitespace lines\n      let whiteSpaceMatch, comment;\n      while (whiteSpaceMatch = this._newline.exec(input)) {\n        // Try to find a comment\n        if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0])))\n          callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\n        // Advance the input\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n        this._line++;\n      }\n      // Skip whitespace on current line\n      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n\n      // Stop for now if we're at the end\n      if (this._endOfFile.test(input)) {\n        // If the input is finished, emit EOF\n        if (inputFinished) {\n          // Try to find a final comment\n          if (outputComments && (comment = this._comment.exec(input)))\n            callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\n          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });\n        }\n        return this._input = input;\n      }\n\n      // Look for specific token types based on the first character\n      const line = this._line, firstChar = input[0];\n      let type = '', value = '', prefix = '',\n          match = null, matchLength = 0, inconclusive = false;\n      switch (firstChar) {\n      case '^':\n        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed\n        if (input.length < 3)\n          break;\n        // Try to match a type\n        else if (input[1] === '^') {\n          this._previousMarker = '^^';\n          // Move to type IRI or prefixed name\n          input = input.substr(2);\n          if (input[0] !== '<') {\n            inconclusive = true;\n            break;\n          }\n        }\n        // If no type, it must be a path expression\n        else {\n          if (this._n3Mode) {\n            matchLength = 1;\n            type = '^';\n          }\n          break;\n        }\n        // Fall through in case the type is an IRI\n      case '<':\n        // Try to find a full IRI without escape sequences\n        if (match = this._unescapedIri.exec(input))\n          type = 'IRI', value = match[1];\n        // Try to find a full IRI with escape sequences\n        else if (match = this._iri.exec(input)) {\n          value = this._unescape(match[1]);\n          if (value === null || illegalIriChars.test(value))\n            return reportSyntaxError(this);\n          type = 'IRI';\n        }\n        // Try to find a nested triple\n        else if (input.length > 1 && input[1] === '<')\n          type = '<<', matchLength = 2;\n        // Try to find a backwards implication arrow\n        else if (this._n3Mode && input.length > 1 && input[1] === '=')\n          type = 'inverse', matchLength = 2, value = '>';\n        break;\n\n      case '>':\n        if (input.length > 1 && input[1] === '>')\n          type = '>>', matchLength = 2;\n        break;\n\n      case '_':\n        // Try to find a blank node. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a blank node.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if ((match = this._blank.exec(input)) ||\n            inputFinished && (match = this._blank.exec(`${input} `)))\n          type = 'blank', prefix = '_', value = match[1];\n        break;\n\n      case '\"':\n        // Try to find a literal without escape sequences\n        if (match = this._simpleQuotedString.exec(input))\n          value = match[1];\n        // Try to find a literal wrapped in three pairs of quotes\n        else {\n          ({ value, matchLength } = this._parseLiteral(input));\n          if (value === null)\n            return reportSyntaxError(this);\n        }\n        if (match !== null || matchLength !== 0) {\n          type = 'literal';\n          this._literalClosingPos = 0;\n        }\n        break;\n\n      case \"'\":\n        if (!this._lineMode) {\n          // Try to find a literal without escape sequences\n          if (match = this._simpleApostropheString.exec(input))\n            value = match[1];\n          // Try to find a literal wrapped in three pairs of quotes\n          else {\n            ({ value, matchLength } = this._parseLiteral(input));\n            if (value === null)\n              return reportSyntaxError(this);\n          }\n          if (match !== null || matchLength !== 0) {\n            type = 'literal';\n            this._literalClosingPos = 0;\n          }\n        }\n        break;\n\n      case '?':\n        // Try to find a variable\n        if (this._n3Mode && (match = this._variable.exec(input)))\n          type = 'var', value = match[0];\n        break;\n\n      case '@':\n        // Try to find a language code\n        if (this._previousMarker === 'literal' && (match = this._langcode.exec(input)))\n          type = 'langcode', value = match[1];\n        // Try to find a keyword\n        else if (match = this._keyword.exec(input))\n          type = match[0];\n        break;\n\n      case '.':\n        // Try to find a dot as punctuation\n        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {\n          type = '.';\n          matchLength = 1;\n          break;\n        }\n        // Fall through to numerical case (could be a decimal dot)\n\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '+':\n      case '-':\n        // Try to find a number. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a number.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if (match = this._number.exec(input) ||\n            inputFinished && (match = this._number.exec(`${input} `))) {\n          type = 'literal', value = match[0];\n          prefix = (typeof match[1] === 'string' ? xsd.double :\n                    (typeof match[2] === 'string' ? xsd.decimal : xsd.integer));\n        }\n        break;\n\n      case 'B':\n      case 'b':\n      case 'p':\n      case 'P':\n      case 'G':\n      case 'g':\n        // Try to find a SPARQL-style keyword\n        if (match = this._sparqlKeyword.exec(input))\n          type = match[0].toUpperCase();\n        else\n          inconclusive = true;\n        break;\n\n      case 'f':\n      case 't':\n        // Try to match a boolean\n        if (match = this._boolean.exec(input))\n          type = 'literal', value = match[0], prefix = xsd.boolean;\n        else\n          inconclusive = true;\n        break;\n\n      case 'a':\n        // Try to find an abbreviated predicate\n        if (match = this._shortPredicates.exec(input))\n          type = 'abbreviation', value = 'a';\n        else\n          inconclusive = true;\n        break;\n\n      case '=':\n        // Try to find an implication arrow or equals sign\n        if (this._n3Mode && input.length > 1) {\n          type = 'abbreviation';\n          if (input[1] !== '>')\n            matchLength = 1, value = '=';\n          else\n            matchLength = 2, value = '>';\n        }\n        break;\n\n      case '!':\n        if (!this._n3Mode)\n          break;\n      case ',':\n      case ';':\n      case '[':\n      case ']':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n        if (!this._lineMode) {\n          matchLength = 1;\n          type = firstChar;\n        }\n        break;\n\n      default:\n        inconclusive = true;\n      }\n\n      // Some first characters do not allow an immediate decision, so inspect more\n      if (inconclusive) {\n        // Try to find a prefix\n        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') &&\n            (match = this._prefix.exec(input)))\n          type = 'prefix', value = match[1] || '';\n        // Try to find a prefixed name. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a prefixed name.\n        // Therefore, try inserting a space if we're at the end of the input.\n        else if ((match = this._prefixed.exec(input)) ||\n                 inputFinished && (match = this._prefixed.exec(`${input} `)))\n          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);\n      }\n\n      // A type token is special: it can only be emitted after an IRI or prefixed name is read\n      if (this._previousMarker === '^^') {\n        switch (type) {\n        case 'prefixed': type = 'type';    break;\n        case 'IRI':      type = 'typeIRI'; break;\n        default:         type = '';\n        }\n      }\n\n      // What if nothing of the above was found?\n      if (!type) {\n        // We could be in streaming mode, and then we just wait for more input to arrive.\n        // Otherwise, a syntax error has occurred in the input.\n        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).\n        if (inputFinished || (!/^'''|^\"\"\"/.test(input) && /\\n|\\r/.test(input)))\n          return reportSyntaxError(this);\n        else\n          return this._input = input;\n      }\n\n      // Emit the parsed token\n      const token = { line: line, type: type, value: value, prefix: prefix };\n      callback(null, token);\n      this.previousToken = token;\n      this._previousMarker = type;\n      // Advance to next part to tokenize\n      input = input.substr(matchLength || match[0].length, input.length);\n    }\n\n    // Signals the syntax error through the callback\n    function reportSyntaxError(self) { callback(self._syntaxError(/^\\S*/.exec(input)[0])); }\n  }\n\n  // ### `_unescape` replaces N3 escape codes by their corresponding characters\n  _unescape(item) {\n    let invalid = false;\n    const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {\n      // 4-digit unicode character\n      if (typeof unicode4 === 'string')\n        return String.fromCharCode(Number.parseInt(unicode4, 16));\n      // 8-digit unicode character\n      if (typeof unicode8 === 'string') {\n        let charCode = Number.parseInt(unicode8, 16);\n        return charCode <= 0xFFFF ? String.fromCharCode(Number.parseInt(unicode8, 16)) :\n          String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));\n      }\n      // fixed escape sequence\n      if (escapedChar in escapeReplacements)\n        return escapeReplacements[escapedChar];\n      // invalid escape sequence\n      invalid = true;\n      return '';\n    });\n    return invalid ? null : replaced;\n  }\n\n  // ### `_parseLiteral` parses a literal into an unescaped value\n  _parseLiteral(input) {\n    // Ensure we have enough lookahead to identify triple-quoted strings\n    if (input.length >= 3) {\n      // Identify the opening quote(s)\n      const opening = input.match(/^(?:\"\"\"|\"|'''|'|)/)[0];\n      const openingLength = opening.length;\n\n      // Find the next candidate closing quotes\n      let closingPos = Math.max(this._literalClosingPos, openingLength);\n      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {\n        // Count backslashes right before the closing quotes\n        let backslashCount = 0;\n        while (input[closingPos - backslashCount - 1] === '\\\\')\n          backslashCount++;\n\n        // An even number of backslashes (in particular 0)\n        // means these are actual, non-escaped closing quotes\n        if (backslashCount % 2 === 0) {\n          // Extract and unescape the value\n          const raw = input.substring(openingLength, closingPos);\n          const lines = raw.split(/\\r\\n|\\r|\\n/).length - 1;\n          const matchLength = closingPos + openingLength;\n          // Only triple-quoted strings can be multi-line\n          if (openingLength === 1 && lines !== 0 ||\n              openingLength === 3 && this._lineMode)\n            break;\n          this._line += lines;\n          return { value: this._unescape(raw), matchLength };\n        }\n        closingPos++;\n      }\n      this._literalClosingPos = input.length - openingLength + 1;\n    }\n    return { value: '', matchLength: 0 };\n  }\n\n  // ### `_syntaxError` creates a syntax error for the given issue\n  _syntaxError(issue) {\n    this._input = null;\n    const err = new Error(`Unexpected \"${issue}\" on line ${this._line}.`);\n    err.context = {\n      token: undefined,\n      line: this._line,\n      previousToken: this.previousToken,\n    };\n    return err;\n  }\n\n  // ## Public methods\n\n  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.\n  // The input can be a string or a stream.\n  tokenize(input, callback) {\n    this._line = 1;\n\n    // If the input is a string, continuously emit tokens through the callback until the end\n    if (typeof input === 'string') {\n      this._input = input;\n      // If a callback was passed, asynchronously call it\n      if (typeof callback === 'function')\n        queueMicrotask(() => this._tokenizeToEnd(callback, true));\n      // If no callback was passed, tokenize synchronously and return\n      else {\n        const tokens = [];\n        let error;\n        this._tokenizeToEnd((e, t) => e ? (error = e) : tokens.push(t), true);\n        if (error) throw error;\n        return tokens;\n      }\n    }\n    // Otherwise, the input must be a stream\n    else {\n      this._input = '';\n      this._pendingBuffer = null;\n      if (typeof input.setEncoding === 'function')\n        input.setEncoding('utf8');\n      // Adds the data chunk to the buffer and parses as far as possible\n      input.on('data', data => {\n        if (this._input !== null && data.length !== 0) {\n          // Prepend any previous pending writes\n          if (this._pendingBuffer) {\n            data = Buffer.concat([this._pendingBuffer, data]);\n            this._pendingBuffer = null;\n          }\n          // Hold if the buffer ends in an incomplete unicode sequence\n          if (data[data.length - 1] & 0x80) {\n            this._pendingBuffer = data;\n          }\n          // Otherwise, tokenize as far as possible\n          else {\n            this._input += data;\n            this._tokenizeToEnd(callback, false);\n          }\n        }\n      });\n      // Parses until the end\n      input.on('end', () => {\n        if (this._input !== null)\n          this._tokenizeToEnd(callback, true);\n      });\n      input.on('error', callback);\n    }\n  }\n}\n","// **N3Util** provides N3 utility functions.\n\nimport N3DataFactory from './N3DataFactory';\n\n// Tests whether the given term represents an IRI\nexport function isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n}\n\n// Tests whether the given term represents a blank node\nexport function isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n}\n\n// Tests whether the given term represents a literal\nexport function isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n}\n\n// Tests whether the given term represents a variable\nexport function isVariable(term) {\n  return !!term && term.termType === 'Variable';\n}\n\n// Tests whether the given term represents the default graph\nexport function isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n}\n\n// Tests whether the given quad is in the default graph\nexport function inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n}\n\n// Creates a function that prepends the given IRI to a local name\nexport function prefix(iri, factory) {\n  return prefixes({ '': iri }, factory)('');\n}\n\n// Creates a function that allows registering and expanding prefixes\nexport function prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  const prefixes = Object.create(null);\n  for (const prefix in defaultPrefixes)\n    processPrefix(prefix, defaultPrefixes[prefix]);\n  // Set the default factory if none was specified\n  factory = factory || N3DataFactory;\n\n  // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      const cache = Object.create(null);\n      prefixes[prefix] = local => {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    }\n    else if (!(prefix in prefixes)) {\n      throw new Error(`Unknown prefix: ${prefix}`);\n    }\n    return prefixes[prefix];\n  }\n  return processPrefix;\n}\n","// N3.js implementations of the RDF/JS core data types\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\n\nimport namespaces from './IRIs';\nimport { isDefaultGraph } from './N3Util';\nconst { rdf, xsd } = namespaces;\n\n// eslint-disable-next-line prefer-const\nlet DEFAULTGRAPH;\nlet _blankNodeCounter = 0;\n\nconst escapedLiteral = /^\"(.*\".*)(?=\"[^\"]*$)/;\nconst quadId = /^<<(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) ?(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+)?>>$/;\n\n// ## DataFactory singleton\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  variable,\n  literal,\n  defaultGraph,\n  quad,\n  triple: quad,\n};\nexport default DataFactory;\n\n// ## Term constructor\nexport class Term {\n  constructor(id) {\n    this.id = id;\n  }\n\n  // ### The value of this term\n  get value() {\n    return this.id;\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Term)\n      return this.id === other.id;\n    // Otherwise, compare term type and value\n    return !!other && this.termType === other.termType &&\n                      this.value    === other.value;\n  }\n\n  // ### Returns a plain object representation of this term\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n    };\n  }\n}\n\n\n// ## NamedNode constructor\nexport class NamedNode extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'NamedNode';\n  }\n}\n\n// ## Literal constructor\nexport class Literal extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'Literal';\n  }\n\n  // ### The text value of this literal\n  get value() {\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\n  }\n\n  // ### The language of this literal\n  get language() {\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\n    const id = this.id;\n    let atPos = id.lastIndexOf('\"') + 1;\n    // If \"@\" it follows, return the remaining substring; empty otherwise\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\n  }\n\n  // ### The datatype IRI of this literal\n  get datatype() {\n    return new NamedNode(this.datatypeString);\n  }\n\n  // ### The datatype string of this literal\n  get datatypeString() {\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\n    const id = this.id, dtPos = id.lastIndexOf('\"') + 1;\n    const char = dtPos < id.length ? id[dtPos] : '';\n    // If \"^\" it follows, return the remaining substring\n    return char === '^' ? id.substr(dtPos + 2) :\n           // If \"@\" follows, return rdf:langString; xsd:string otherwise\n           (char !== '@' ? xsd.string : rdf.langString);\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both literals were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Literal)\n      return this.id === other.id;\n    // Otherwise, compare term type, value, language, and datatype\n    return !!other && !!other.datatype &&\n                      this.termType === other.termType &&\n                      this.value    === other.value    &&\n                      this.language === other.language &&\n                      this.datatype.value === other.datatype.value;\n  }\n\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n      language: this.language,\n      datatype: { termType: 'NamedNode', value: this.datatypeString },\n    };\n  }\n}\n\n// ## BlankNode constructor\nexport class BlankNode extends Term {\n  constructor(name) {\n    super(`_:${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'BlankNode';\n  }\n\n  // ### The name of this blank node\n  get value() {\n    return this.id.substr(2);\n  }\n}\n\nexport class Variable extends Term {\n  constructor(name) {\n    super(`?${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Variable';\n  }\n\n  // ### The name of this variable\n  get value() {\n    return this.id.substr(1);\n  }\n}\n\n// ## DefaultGraph constructor\nexport class DefaultGraph extends Term {\n  constructor() {\n    super('');\n    return DEFAULTGRAPH || this;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'DefaultGraph';\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through strict equality;\n    // otherwise, compare term types.\n    return (this === other) || (!!other && (this.termType === other.termType));\n  }\n}\n\n// ## DefaultGraph singleton\nDEFAULTGRAPH = new DefaultGraph();\n\n\n// ### Constructs a term from the given internal string ID\nexport function termFromId(id, factory) {\n  factory = factory || DataFactory;\n\n  // Falsy value or empty string indicate the default graph\n  if (!id)\n    return factory.defaultGraph();\n\n  // Identify the term type based on the first character\n  switch (id[0]) {\n  case '?':\n    return factory.variable(id.substr(1));\n  case '_':\n    return factory.blankNode(id.substr(2));\n  case '\"':\n    // Shortcut for internal literals\n    if (factory === DataFactory)\n      return new Literal(id);\n    // Literal without datatype or language\n    if (id[id.length - 1] === '\"')\n      return factory.literal(id.substr(1, id.length - 2));\n    // Literal with datatype or language\n    const endPos = id.lastIndexOf('\"', id.length - 1);\n    return factory.literal(id.substr(1, endPos - 1),\n            id[endPos + 1] === '@' ? id.substr(endPos + 2)\n                                   : factory.namedNode(id.substr(endPos + 3)));\n  case '<':\n    const components = quadId.exec(id);\n    return factory.quad(\n      termFromId(unescapeQuotes(components[1]), factory),\n      termFromId(unescapeQuotes(components[2]), factory),\n      termFromId(unescapeQuotes(components[3]), factory),\n      components[4] && termFromId(unescapeQuotes(components[4]), factory)\n    );\n  default:\n    return factory.namedNode(id);\n  }\n}\n\n// ### Constructs an internal string ID from the given term or ID string\nexport function termToId(term) {\n  if (typeof term === 'string')\n    return term;\n  if (term instanceof Term && term.termType !== 'Quad')\n    return term.id;\n  if (!term)\n    return DEFAULTGRAPH.id;\n\n  // Term instantiated with another library\n  switch (term.termType) {\n  case 'NamedNode':    return term.value;\n  case 'BlankNode':    return `_:${term.value}`;\n  case 'Variable':     return `?${term.value}`;\n  case 'DefaultGraph': return '';\n  case 'Literal':      return `\"${term.value}\"${\n    term.language ? `@${term.language}` :\n      (term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : '')}`;\n  case 'Quad':\n    // To identify RDF* quad components, we escape quotes by doubling them.\n    // This avoids the overhead of backslash parsing of Turtle-like syntaxes.\n    return `<<${\n        escapeQuotes(termToId(term.subject))\n      } ${\n        escapeQuotes(termToId(term.predicate))\n      } ${\n        escapeQuotes(termToId(term.object))\n      }${\n        (isDefaultGraph(term.graph)) ? '' : ` ${termToId(term.graph)}`\n      }>>`;\n  default: throw new Error(`Unexpected termType: ${term.termType}`);\n  }\n}\n\n\n// ## Quad constructor\nexport class Quad extends Term {\n  constructor(subject, predicate, object, graph) {\n    super('');\n    this.subject   = subject;\n    this.predicate = predicate;\n    this.object    = object;\n    this.graph     = graph || DEFAULTGRAPH;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Quad';\n  }\n\n  // ### Returns a plain object representation of this quad\n  toJSON() {\n    return {\n      termType:  this.termType,\n      subject:   this.subject.toJSON(),\n      predicate: this.predicate.toJSON(),\n      object:    this.object.toJSON(),\n      graph:     this.graph.toJSON(),\n    };\n  }\n\n  // ### Returns whether this object represents the same quad as the other\n  equals(other) {\n    return !!other && this.subject.equals(other.subject)     &&\n                      this.predicate.equals(other.predicate) &&\n                      this.object.equals(other.object)       &&\n                      this.graph.equals(other.graph);\n  }\n}\nexport { Quad as Triple };\n\n// ### Escapes the quotes within the given literal\nexport function escapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"/g, '\"\"')}`);\n}\n\n// ### Unescapes the quotes within the given literal\nexport function unescapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"\"/g, '\"')}`);\n}\n\n// ### Creates an IRI\nfunction namedNode(iri) {\n  return new NamedNode(iri);\n}\n\n// ### Creates a blank node\nfunction blankNode(name) {\n  return new BlankNode(name || `n3-${_blankNodeCounter++}`);\n}\n\n// ### Creates a literal\nfunction literal(value, languageOrDataType) {\n  // Create a language-tagged string\n  if (typeof languageOrDataType === 'string')\n    return new Literal(`\"${value}\"@${languageOrDataType.toLowerCase()}`);\n\n  // Automatically determine datatype for booleans and numbers\n  let datatype = languageOrDataType ? languageOrDataType.value : '';\n  if (datatype === '') {\n    // Convert a boolean\n    if (typeof value === 'boolean')\n      datatype = xsd.boolean;\n    // Convert an integer or double\n    else if (typeof value === 'number') {\n      if (Number.isFinite(value))\n        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;\n      else {\n        datatype = xsd.double;\n        if (!Number.isNaN(value))\n          value = value > 0 ? 'INF' : '-INF';\n      }\n    }\n  }\n\n  // Create a datatyped literal\n  return (datatype === '' || datatype === xsd.string) ?\n    new Literal(`\"${value}\"`) :\n    new Literal(`\"${value}\"^^${datatype}`);\n}\n\n// ### Creates a variable\nfunction variable(name) {\n  return new Variable(name);\n}\n\n// ### Returns the default graph\nfunction defaultGraph() {\n  return DEFAULTGRAPH;\n}\n\n// ### Creates a quad\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph);\n}\n","// **N3Parser** parses N3 documents.\nimport N3Lexer from './N3Lexer';\nimport N3DataFactory from './N3DataFactory';\nimport namespaces from './IRIs';\n\nlet blankNodePrefix = 0;\n\n// ## Constructor\nexport default class N3Parser {\n  constructor(options) {\n    this._contextStack = [];\n    this._graph = null;\n\n    // Set the document IRI\n    options = options || {};\n    this._setBase(options.baseIRI);\n    options.factory && initDataFactory(this, options.factory);\n\n    // Set supported features depending on the format\n    const format = (typeof options.format === 'string') ?\n                 options.format.match(/\\w*$/)[0].toLowerCase() : '',\n        isTurtle = /turtle/.test(format), isTriG = /trig/.test(format),\n        isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),\n        isN3 = this._n3Mode = /n3/.test(format),\n        isLineMode = isNTriples || isNQuads;\n    if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))\n      this._readPredicateOrNamedGraph = this._readPredicate;\n    // Support triples in other graphs\n    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);\n    // Support nesting of triples\n    this._supportsRDFStar = format === '' || /star|\\*$/.test(format);\n    // Disable relative IRIs in N-Triples or N-Quads mode\n    if (isLineMode)\n      this._resolveRelativeIRI = iri => { return null; };\n    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :\n                              options.blankNodePrefix.replace(/^(?!_:)/, '_:');\n    this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode, n3: isN3 });\n    // Disable explicit quantifiers by default\n    this._explicitQuantifiers = !!options.explicitQuantifiers;\n  }\n\n  // ## Static class methods\n\n  // ### `_resetBlankNodePrefix` restarts blank node prefix identification\n  static _resetBlankNodePrefix() {\n    blankNodePrefix = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_setBase` sets the base IRI to resolve relative IRIs\n  _setBase(baseIRI) {\n    if (!baseIRI) {\n      this._base = '';\n      this._basePath = '';\n    }\n    else {\n      // Remove fragment if present\n      const fragmentPos = baseIRI.indexOf('#');\n      if (fragmentPos >= 0)\n        baseIRI = baseIRI.substr(0, fragmentPos);\n      // Set base IRI and its components\n      this._base = baseIRI;\n      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :\n                         baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');\n      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i);\n      this._baseRoot   = baseIRI[0];\n      this._baseScheme = baseIRI[1];\n    }\n  }\n\n  // ### `_saveContext` stores the current parsing context\n  // when entering a new scope (list, blank node, formula)\n  _saveContext(type, graph, subject, predicate, object) {\n    const n3Mode = this._n3Mode;\n    this._contextStack.push({\n      subject: subject, predicate: predicate, object: object,\n      graph: graph, type: type,\n      inverse: n3Mode ? this._inversePredicate : false,\n      blankPrefix: n3Mode ? this._prefixes._ : '',\n      quantified: n3Mode ? this._quantified : null,\n    });\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      // Every new scope resets the predicate direction\n      this._inversePredicate = false;\n      // In N3, blank nodes are scoped to a formula\n      // (using a dot as separator, as a blank node label cannot start with it)\n      this._prefixes._ = (this._graph ? `${this._graph.id.substr(2)}.` : '.');\n      // Quantifiers are scoped to a formula\n      this._quantified = Object.create(this._quantified);\n    }\n  }\n\n  // ### `_restoreContext` restores the parent context\n  // when leaving a scope (list, blank node, formula)\n  _restoreContext() {\n    const context = this._contextStack.pop(), n3Mode = this._n3Mode;\n    this._subject   = context.subject;\n    this._predicate = context.predicate;\n    this._object    = context.object;\n    this._graph     = context.graph;\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      this._inversePredicate = context.inverse;\n      this._prefixes._ = context.blankPrefix;\n      this._quantified = context.quantified;\n    }\n  }\n\n  // ### `_readInTopContext` reads a token when in the top context\n  _readInTopContext(token) {\n    switch (token.type) {\n    // If an EOF token arrives in the top context, signal that we're done\n    case 'eof':\n      if (this._graph !== null)\n        return this._error('Unclosed graph', token);\n      delete this._prefixes._;\n      return this._callback(null, null, this._prefixes);\n    // It could be a prefix declaration\n    case 'PREFIX':\n      this._sparqlStyle = true;\n    case '@prefix':\n      return this._readPrefix;\n    // It could be a base declaration\n    case 'BASE':\n      this._sparqlStyle = true;\n    case '@base':\n      return this._readBaseIRI;\n    // It could be a graph\n    case '{':\n      if (this._supportsNamedGraphs) {\n        this._graph = '';\n        this._subject = null;\n        return this._readSubject;\n      }\n    case 'GRAPH':\n      if (this._supportsNamedGraphs)\n        return this._readNamedGraphLabel;\n    // Otherwise, the next token must be a subject\n    default:\n      return this._readSubject(token);\n    }\n  }\n\n  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable\n  _readEntity(token, quantifier) {\n    let value;\n    switch (token.type) {\n    // Read a relative or absolute IRI\n    case 'IRI':\n    case 'typeIRI':\n      const iri = this._resolveIRI(token.value);\n      if (iri === null)\n        return this._error('Invalid IRI', token);\n      value = this._namedNode(iri);\n      break;\n    // Read a prefixed name\n    case 'type':\n    case 'prefixed':\n      const prefix = this._prefixes[token.prefix];\n      if (prefix === undefined)\n        return this._error(`Undefined prefix \"${token.prefix}:\"`, token);\n      value = this._namedNode(prefix + token.value);\n      break;\n    // Read a blank node\n    case 'blank':\n      value = this._blankNode(this._prefixes[token.prefix] + token.value);\n      break;\n    // Read a variable\n    case 'var':\n      value = this._variable(token.value.substr(1));\n      break;\n    // Everything else is not an entity\n    default:\n      return this._error(`Expected entity but got ${token.type}`, token);\n    }\n    // In N3 mode, replace the entity if it is quantified\n    if (!quantifier && this._n3Mode && (value.id in this._quantified))\n      value = this._quantified[value.id];\n    return value;\n  }\n\n  // ### `_readSubject` reads a quad's subject\n  _readSubject(token) {\n    this._predicate = null;\n    switch (token.type) {\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph,\n                        this._subject = this._blankNode(), null, null);\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this.RDF_NIL, null, null);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph,\n                        this._graph = this._blankNode(), null, null);\n      return this._readSubject;\n    case '}':\n       // No subject; the graph in which we are reading is closed instead\n      return this._readPunctuation(token);\n    case '@forSome':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forSome\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORSOME;\n      this._quantifier = this._blankNode;\n      return this._readQuantifierList;\n    case '@forAll':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forAll\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORALL;\n      this._quantifier = this._variable;\n      return this._readQuantifierList;\n    case 'literal':\n      if (!this._n3Mode)\n        return this._error('Unexpected literal', token);\n\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._completeSubjectLiteral;\n      }\n      else\n        this._subject = this._literal(token.value, this._namedNode(token.prefix));\n\n      break;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, null, null, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the subject entity\n      if ((this._subject = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the subject might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._readPredicateOrNamedGraph);\n    }\n\n    // The next token must be a predicate,\n    // or, if the subject was actually a graph IRI, a named graph\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // ### `_readPredicate` reads a quad's predicate\n  _readPredicate(token) {\n    const type = token.type;\n    switch (type) {\n    case 'inverse':\n      this._inversePredicate = true;\n    case 'abbreviation':\n      this._predicate = this.ABBREVIATIONS[token.value];\n      break;\n    case '.':\n    case ']':\n    case '}':\n      // Expected predicate didn't come, must have been trailing semicolon\n      if (this._predicate === null)\n        return this._error(`Unexpected ${type}`, token);\n      this._subject = null;\n      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);\n    case ';':\n      // Additional semicolons can be safely ignored\n      return this._predicate !== null ? this._readPredicate :\n             this._error('Expected predicate but got ;', token);\n    case 'blank':\n      if (!this._n3Mode)\n        return this._error('Disallowed blank node as predicate', token);\n    default:\n      if ((this._predicate = this._readEntity(token)) === undefined)\n        return;\n    }\n    // The next token must be an object\n    return this._readObject;\n  }\n\n  // ### `_readObject` reads a quad's object\n  _readObject(token) {\n    switch (token.type) {\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._readDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else\n        this._object = this._literal(token.value, this._namedNode(token.prefix));\n      break;\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph, this._subject, this._predicate,\n                        this._subject = this._blankNode());\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, this._subject, this._predicate, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the object entity\n      if ((this._object = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the object might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._getContextEndReader());\n    }\n    return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph\n  _readPredicateOrNamedGraph(token) {\n    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);\n  }\n\n  // ### `_readGraph` reads a graph\n  _readGraph(token) {\n    if (token.type !== '{')\n      return this._error(`Expected graph but got ${token.type}`, token);\n    // The \"subject\" we read is actually the GRAPH's label\n    this._graph = this._subject, this._subject = null;\n    return this._readSubject;\n  }\n\n  // ### `_readBlankNodeHead` reads the head of a blank node\n  _readBlankNodeHead(token) {\n    if (token.type === ']') {\n      this._subject = null;\n      return this._readBlankNodeTail(token);\n    }\n    else {\n      this._predicate = null;\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readBlankNodeTail` reads the end of a blank node\n  _readBlankNodeTail(token) {\n    if (token.type !== ']')\n      return this._readBlankNodePunctuation(token);\n\n    // Store blank node quad\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this blank node\n    const empty = this._predicate === null;\n    this._restoreContext();\n    // If the blank node was the subject, continue reading the predicate\n    if (this._object === null)\n      // If the blank node was empty, it could be a named graph label\n      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;\n    // If the blank node was the object, restore previous context and read punctuation\n    else\n      return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node\n  _readPredicateAfterBlank(token) {\n    switch (token.type) {\n    case '.':\n    case '}':\n      // No predicate is coming if the triple is terminated here\n      this._subject = null;\n      return this._readPunctuation(token);\n    default:\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readListItem` reads items from a list\n  _readListItem(token) {\n    let item = null,                      // The item of the list\n        list = null,                      // The list itself\n        next = this._readListItem;        // The next function to execute\n    const previousList = this._subject,   // The previous list that contains this list\n        stack = this._contextStack,       // The stack of parent contexts\n        parent = stack[stack.length - 1]; // The parent containing the current list\n\n    switch (token.type) {\n    case '[':\n      // Stack the current list quad and start a new quad with a blank node as subject\n      this._saveContext('blank', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST,\n                        this._subject = item = this._blankNode());\n      next = this._readBlankNodeHead;\n      break;\n    case '(':\n      // Stack the current list quad and start a new list\n      this._saveContext('list', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);\n      this._subject = null;\n      break;\n    case ')':\n      // Closing the list; restore the parent context\n      this._restoreContext();\n      // If this list is contained within a parent list, return the membership quad here.\n      // This will be `<parent list element> rdf:first <this list>.`.\n      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')\n        this._emit(this._subject, this._predicate, this._object, this._graph);\n      // Was this list the parent's subject?\n      if (this._predicate === null) {\n        // The next token is the predicate\n        next = this._readPredicate;\n        // No list tail if this was an empty list\n        if (this._subject === this.RDF_NIL)\n          return next;\n      }\n      // The list was in the parent context's object\n      else {\n        next = this._getContextEndReader();\n        // No list tail if this was an empty list\n        if (this._object === this.RDF_NIL)\n          return next;\n      }\n      // Close the list by making the head nil\n      list = this.RDF_NIL;\n      break;\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        next = this._readListItemDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else {\n        item = this._literal(token.value, this._namedNode(token.prefix));\n        next = this._getContextEndReader();\n      }\n      break;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    default:\n      if ((item = this._readEntity(token)) === undefined)\n        return;\n    }\n\n     // Create a new blank node if no item head was assigned yet\n    if (list === null)\n      this._subject = list = this._blankNode();\n\n    // Is this the first element of the list?\n    if (previousList === null) {\n      // This list is either the subject or the object of its parent\n      if (parent.predicate === null)\n        parent.subject = list;\n      else\n        parent.object = list;\n    }\n    else {\n      // Continue the previous list with the current list\n      this._emit(previousList, this.RDF_REST, list, this._graph);\n    }\n    // If an item was read, add it to the list\n    if (item !== null) {\n      // In N3 mode, the item might be a path\n      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {\n        // Create a new context to add the item's path\n        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);\n        this._subject = item, this._predicate = null;\n        // _readPath will restore the context and output the item\n        return this._getPathReader(this._readListItem);\n      }\n      // Output the item\n      this._emit(list, this.RDF_FIRST, item, this._graph);\n    }\n    return next;\n  }\n\n  // ### `_readDataTypeOrLang` reads an _optional_ datatype or language\n  _readDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, false);\n  }\n\n\n  // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list\n  _readListItemDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, true);\n  }\n\n  // ### `_completeLiteral` completes a literal with an optional datatype or language\n  _completeLiteral(token) {\n    // Create a simple string literal by default\n    let literal = this._literal(this._literalValue);\n\n    switch (token.type) {\n    // Create a datatyped literal\n    case 'type':\n    case 'typeIRI':\n      const datatype = this._readEntity(token);\n      if (datatype === undefined) return; // No datatype means an error occurred\n      literal = this._literal(this._literalValue, datatype);\n      token = null;\n      break;\n    // Create a language-tagged string\n    case 'langcode':\n      literal = this._literal(this._literalValue, token.value);\n      token = null;\n      break;\n    }\n\n    return { token, literal };\n  }\n\n  // Completes a literal in subject position\n  _completeSubjectLiteral(token) {\n    this._subject = this._completeLiteral(token).literal;\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // Completes a literal in object position\n  _completeObjectLiteral(token, listItem) {\n    const completed = this._completeLiteral(token);\n    if (!completed)\n      return;\n    this._object = completed.literal;\n\n    // If this literal was part of a list, write the item\n    // (we could also check the context stack, but passing in a flag is faster)\n    if (listItem)\n      this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);\n    // If the token was consumed, continue with the rest of the input\n    if (completed.token === null)\n      return this._getContextEndReader();\n    // Otherwise, consume the token now\n    else {\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(completed.token);\n    }\n  }\n\n  // ### `_readFormulaTail` reads the end of a formula\n  _readFormulaTail(token) {\n    if (token.type !== '}')\n      return this._readPunctuation(token);\n\n    // Store the last quad of the formula\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this formula\n    this._restoreContext();\n    // If the formula was the subject, continue reading the predicate.\n    // If the formula was the object, read punctuation.\n    return this._object === null ? this._readPredicate : this._getContextEndReader();\n  }\n\n  // ### `_readPunctuation` reads punctuation between quads or quad parts\n  _readPunctuation(token) {\n    let next, graph = this._graph;\n    const subject = this._subject, inversePredicate = this._inversePredicate;\n    switch (token.type) {\n    // A closing brace ends a graph\n    case '}':\n      if (this._graph === null)\n        return this._error('Unexpected graph closing', token);\n      if (this._n3Mode)\n        return this._readFormulaTail(token);\n      this._graph = null;\n    // A dot just ends the statement, without sharing anything with the next\n    case '.':\n      this._subject = null;\n      next = this._contextStack.length ? this._readSubject : this._readInTopContext;\n      if (inversePredicate) this._inversePredicate = false;\n      break;\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {\n        next = this._readQuadPunctuation;\n        break;\n      }\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    if (subject !== null) {\n      const predicate = this._predicate, object = this._object;\n      if (!inversePredicate)\n        this._emit(subject, predicate, object,  graph);\n      else\n        this._emit(object,  predicate, subject, graph);\n    }\n    return next;\n  }\n\n    // ### `_readBlankNodePunctuation` reads punctuation in a blank node\n  _readBlankNodePunctuation(token) {\n    let next;\n    switch (token.type) {\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    this._emit(this._subject, this._predicate, this._object, this._graph);\n    return next;\n  }\n\n  // ### `_readQuadPunctuation` reads punctuation after a quad\n  _readQuadPunctuation(token) {\n    if (token.type !== '.')\n      return this._error('Expected dot to follow quad', token);\n    return this._readInTopContext;\n  }\n\n  // ### `_readPrefix` reads the prefix of a prefix declaration\n  _readPrefix(token) {\n    if (token.type !== 'prefix')\n      return this._error('Expected prefix to follow @prefix', token);\n    this._prefix = token.value;\n    return this._readPrefixIRI;\n  }\n\n  // ### `_readPrefixIRI` reads the IRI of a prefix declaration\n  _readPrefixIRI(token) {\n    if (token.type !== 'IRI')\n      return this._error(`Expected IRI to follow prefix \"${this._prefix}:\"`, token);\n    const prefixNode = this._readEntity(token);\n    this._prefixes[this._prefix] = prefixNode.value;\n    this._prefixCallback(this._prefix, prefixNode);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readBaseIRI` reads the IRI of a base declaration\n  _readBaseIRI(token) {\n    const iri = token.type === 'IRI' && this._resolveIRI(token.value);\n    if (!iri)\n      return this._error('Expected valid IRI to follow base declaration', token);\n    this._setBase(iri);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readNamedGraphLabel` reads the label of a named graph\n  _readNamedGraphLabel(token) {\n    switch (token.type) {\n    case 'IRI':\n    case 'blank':\n    case 'prefixed':\n      return this._readSubject(token), this._readGraph;\n    case '[':\n      return this._readNamedGraphBlankLabel;\n    default:\n      return this._error('Invalid graph label', token);\n    }\n  }\n\n  // ### `_readNamedGraphLabel` reads a blank node label of a named graph\n  _readNamedGraphBlankLabel(token) {\n    if (token.type !== ']')\n      return this._error('Invalid graph label', token);\n    this._subject = this._blankNode();\n    return this._readGraph;\n  }\n\n  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration\n  _readDeclarationPunctuation(token) {\n    // SPARQL-style declarations don't have punctuation\n    if (this._sparqlStyle) {\n      this._sparqlStyle = false;\n      return this._readInTopContext(token);\n    }\n\n    if (token.type !== '.')\n      return this._error('Expected declaration to end with a dot', token);\n    return this._readInTopContext;\n  }\n\n  // Reads a list of quantified symbols from a @forSome or @forAll statement\n  _readQuantifierList(token) {\n    let entity;\n    switch (token.type) {\n    case 'IRI':\n    case 'prefixed':\n      if ((entity = this._readEntity(token, true)) !== undefined)\n        break;\n    default:\n      return this._error(`Unexpected ${token.type}`, token);\n    }\n    // Without explicit quantifiers, map entities to a quantified entity\n    if (!this._explicitQuantifiers)\n      this._quantified[entity.id] = this._quantifier(this._blankNode().value);\n    // With explicit quantifiers, output the reified quantifier\n    else {\n      // If this is the first item, start a new quantifier list\n      if (this._subject === null)\n        this._emit(this._graph || this.DEFAULTGRAPH, this._predicate,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Otherwise, continue the previous list\n      else\n        this._emit(this._subject, this.RDF_REST,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Output the list item\n      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);\n    }\n    return this._readQuantifierPunctuation;\n  }\n\n  // Reads punctuation from a @forSome or @forAll statement\n  _readQuantifierPunctuation(token) {\n    // Read more quantifiers\n    if (token.type === ',')\n      return this._readQuantifierList;\n    // End of the quantifier list\n    else {\n      // With explicit quantifiers, close the quantifier list\n      if (this._explicitQuantifiers) {\n        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);\n        this._subject = null;\n      }\n      // Read a dot\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(token);\n    }\n  }\n\n  // ### `_getPathReader` reads a potential path and then resumes with the given function\n  _getPathReader(afterPath) {\n    this._afterPath = afterPath;\n    return this._readPath;\n  }\n\n  // ### `_readPath` reads a potential path\n  _readPath(token) {\n    switch (token.type) {\n    // Forward path\n    case '!': return this._readForwardPath;\n    // Backward path\n    case '^': return this._readBackwardPath;\n    // Not a path; resume reading where we left off\n    default:\n      const stack = this._contextStack, parent = stack.length && stack[stack.length - 1];\n      // If we were reading a list item, we still need to output it\n      if (parent && parent.type === 'item') {\n        // The list item is the remaining subejct after reading the path\n        const item = this._subject;\n        // Switch back to the context of the list\n        this._restoreContext();\n        // Output the list item\n        this._emit(this._subject, this.RDF_FIRST, item, this._graph);\n      }\n      return this._afterPath(token);\n    }\n  }\n\n  // ### `_readForwardPath` reads a '!' path\n  _readForwardPath(token) {\n    let subject, predicate;\n    const object = this._blankNode();\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's object\n    if (this._predicate === null)\n      subject = this._subject, this._subject = object;\n    // If we were reading an object, replace the subject by the path's object\n    else\n      subject = this._object,  this._object  = object;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readBackwardPath` reads a '^' path\n  _readBackwardPath(token) {\n    const subject = this._blankNode();\n    let predicate, object;\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's subject\n    if (this._predicate === null)\n      object = this._subject, this._subject = subject;\n    // If we were reading an object, replace the subject by the path's subject\n    else\n      object = this._object,  this._object  = subject;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple\n  _readRDFStarTailOrGraph(token) {\n    if (token.type !== '>>') {\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined)\n        return this._readRDFStarTail;\n      return this._error(`Expected >> to follow \"${this._object.id}\"`, token);\n    }\n    return this._readRDFStarTail(token);\n  }\n\n  // ### `_readRDFStarTail` reads the end of a nested RDF* triple\n  _readRDFStarTail(token) {\n    if (token.type !== '>>')\n      return this._error(`Expected >> but got ${token.type}`, token);\n    // Read the quad and restore the previous context\n    const quad = this._quad(this._subject, this._predicate, this._object,\n      this._graph || this.DEFAULTGRAPH);\n    this._restoreContext();\n    // If the triple was the subject, continue by reading the predicate.\n    if (this._subject === null) {\n      this._subject = quad;\n      return this._readPredicate;\n    }\n    // If the triple was the object, read context end.\n    else {\n      this._object = quad;\n      return this._getContextEndReader();\n    }\n  }\n\n  // ### `_getContextEndReader` gets the next reader function at the end of a context\n  _getContextEndReader() {\n    const contextStack = this._contextStack;\n    if (!contextStack.length)\n      return this._readPunctuation;\n\n    switch (contextStack[contextStack.length - 1].type) {\n    case 'blank':\n      return this._readBlankNodeTail;\n    case 'list':\n      return this._readListItem;\n    case 'formula':\n      return this._readFormulaTail;\n    case '<<':\n      return this._readRDFStarTailOrGraph;\n    }\n  }\n\n  // ### `_emit` sends a quad through the callback\n  _emit(subject, predicate, object, graph) {\n    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));\n  }\n\n  // ### `_error` emits an error message through the callback\n  _error(message, token) {\n    const err = new Error(`${message} on line ${token.line}.`);\n    err.context = {\n      token: token,\n      line: token.line,\n      previousToken: this._lexer.previousToken,\n    };\n    this._callback(err);\n    this._callback = noop;\n  }\n\n  // ### `_resolveIRI` resolves an IRI against the base path\n  _resolveIRI(iri) {\n    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);\n  }\n\n  // ### `_resolveRelativeIRI` resolves an IRI against the base path,\n  // assuming that a base path has been set and that the IRI is indeed relative\n  _resolveRelativeIRI(iri) {\n    // An empty relative IRI indicates the base IRI\n    if (!iri.length)\n      return this._base;\n    // Decide resolving strategy based in the first character\n    switch (iri[0]) {\n    // Resolve relative fragment IRIs against the base IRI\n    case '#': return this._base + iri;\n    // Resolve relative query string IRIs by replacing the query string\n    case '?': return this._base.replace(/(?:\\?.*)?$/, iri);\n    // Resolve root-relative IRIs at the root of the base IRI\n    case '/':\n      // Resolve scheme-relative IRIs to the scheme\n      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);\n    // Resolve all other IRIs at the base IRI's path\n    default:\n      // Relative IRIs cannot contain a colon in the first path segment\n      return (/^[^/:]*:/.test(iri)) ? null : this._removeDotSegments(this._basePath + iri);\n    }\n  }\n\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986\n  _removeDotSegments(iri) {\n    // Don't modify the IRI if it does not contain any dot segments\n    if (!/(^|\\/)\\.\\.?($|[/#?])/.test(iri))\n      return iri;\n\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\n    const length = iri.length;\n    let result = '', i = -1, pathStart = -1, segmentStart = 0, next = '/';\n\n    while (i < length) {\n      switch (next) {\n      // The path starts with the first slash after the authority\n      case ':':\n        if (pathStart < 0) {\n          // Skip two slashes before the authority\n          if (iri[++i] === '/' && iri[++i] === '/')\n            // Skip to slash after the authority\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\n              i = pathStart;\n        }\n        break;\n      // Don't modify a query string or fragment\n      case '?':\n      case '#':\n        i = length;\n        break;\n      // Handle '/.' or '/..' path segments\n      case '/':\n        if (iri[i + 1] === '.') {\n          next = iri[++i + 1];\n          switch (next) {\n          // Remove a '/.' segment\n          case '/':\n            result += iri.substring(segmentStart, i - 1);\n            segmentStart = i + 1;\n            break;\n          // Remove a trailing '/.' segment\n          case undefined:\n          case '?':\n          case '#':\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\n          // Remove a '/..' segment\n          case '.':\n            next = iri[++i + 1];\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\n              result += iri.substring(segmentStart, i - 2);\n              // Try to remove the parent path from result\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\n                result = result.substr(0, segmentStart);\n              // Remove a trailing '/..' segment\n              if (next !== '/')\n                return `${result}/${iri.substr(i + 1)}`;\n              segmentStart = i + 1;\n            }\n          }\n        }\n      }\n      next = iri[++i];\n    }\n    return result + iri.substring(segmentStart);\n  }\n\n  // ## Public methods\n\n  // ### `parse` parses the N3 input and emits each parsed quad through the callback\n  parse(input, quadCallback, prefixCallback) {\n    // The read callback is the next function to be executed when a token arrives.\n    // We start reading in the top context.\n    this._readCallback = this._readInTopContext;\n    this._sparqlStyle = false;\n    this._prefixes = Object.create(null);\n    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2)\n                                             : `b${blankNodePrefix++}_`;\n    this._prefixCallback = prefixCallback || noop;\n    this._inversePredicate = false;\n    this._quantified = Object.create(null);\n\n    // Parse synchronously if no quad callback is given\n    if (!quadCallback) {\n      const quads = [];\n      let error;\n      this._callback = (e, t) => { e ? (error = e) : t && quads.push(t); };\n      this._lexer.tokenize(input).every(token => {\n        return this._readCallback = this._readCallback(token);\n      });\n      if (error) throw error;\n      return quads;\n    }\n\n    // Parse asynchronously otherwise, executing the read callback when a token arrives\n    this._callback = quadCallback;\n    this._lexer.tokenize(input, (error, token) => {\n      if (error !== null)\n        this._callback(error), this._callback = noop;\n      else if (this._readCallback)\n        this._readCallback = this._readCallback(token);\n    });\n  }\n}\n\n// The empty function\nfunction noop() {}\n\n// Initializes the parser with the given data factory\nfunction initDataFactory(parser, factory) {\n  // Set factory methods\n  const namedNode = factory.namedNode;\n  parser._namedNode   = namedNode;\n  parser._blankNode   = factory.blankNode;\n  parser._literal     = factory.literal;\n  parser._variable    = factory.variable;\n  parser._quad        = factory.quad;\n  parser.DEFAULTGRAPH = factory.defaultGraph();\n\n  // Set common named nodes\n  parser.RDF_FIRST  = namedNode(namespaces.rdf.first);\n  parser.RDF_REST   = namedNode(namespaces.rdf.rest);\n  parser.RDF_NIL    = namedNode(namespaces.rdf.nil);\n  parser.N3_FORALL  = namedNode(namespaces.r.forAll);\n  parser.N3_FORSOME = namedNode(namespaces.r.forSome);\n  parser.ABBREVIATIONS = {\n    'a': namedNode(namespaces.rdf.type),\n    '=': namedNode(namespaces.owl.sameAs),\n    '>': namedNode(namespaces.log.implies),\n  };\n  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');\n}\ninitDataFactory(N3Parser.prototype, N3DataFactory);\n","// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport { default as N3DataFactory, Term } from './N3DataFactory';\nimport { isDefaultGraph } from './N3Util';\n\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\n\nconst { rdf, xsd } = namespaces;\n\n// Characters in literals that require escaping\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals() {\n    return false;\n  }\n}\n\n// ## Constructor\nexport default class N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function')\n      options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      let output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) { output += chunk; done && done(); },\n        end: done => { done && done(null, output); },\n      };\n      this._endStream = true;\n    }\n    else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!(/triple|quad/i).test(options.format)) {\n      this._lineMode = false;\n      this._graph = DEFAULTGRAPH;\n      this._baseIRI = options.baseIRI;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n    }\n    else {\n      this._lineMode = true;\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(`;\\n    ${\n                      this._encodePredicate(this._predicate = predicate)} ${\n                      this._encodeObject(object)}`, done);\n      }\n      // Different subject; write the whole quad\n      else\n        this._write(`${(this._subject === null ? '' : '.\\n') +\n                    this._encodeSubject(this._subject = subject)} ${\n                    this._encodePredicate(this._predicate = predicate)} ${\n                    this._encodeObject(object)}`, done);\n    }\n    catch (error) { done && done(error); }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return  `${this._encodeSubject(subject)} ${\n            this._encodeIriOrBlank(predicate)} ${\n            this._encodeObject(object)\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    return quads.map(t => {\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\n    }).join('');\n  }\n\n  // ### `_encodeSubject` represents a subject\n  _encodeSubject(entity) {\n    return entity.termType === 'Quad' ?\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && (entity.value in this._lists))\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseIRI && iri.startsWith(this._baseIRI))\n      iri = iri.substr(this._baseIRI.length);\n    // Escape special characters\n    if (escape.test(iri))\n      iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? `<${iri}>` :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    let value = literal.value;\n    if (escape.test(value))\n      value = value.replace(escapeAll, characterReplacer);\n\n    // Write a language-tagged literal\n    if (literal.language)\n      return `\"${value}\"@${literal.language}`;\n\n    // Write dedicated literals per data type\n    if (this._lineMode) {\n      // Only abbreviate strings in N-Triples or N-Quads\n      if (literal.datatype.value === xsd.string)\n        return `\"${value}\"`;\n    }\n    else {\n      // Use common datatype abbreviations in Turtle or TriG\n      switch (literal.datatype.value) {\n      case xsd.string:\n        return `\"${value}\"`;\n      case xsd.boolean:\n        if (value === 'true' || value === 'false')\n          return value;\n        break;\n      case xsd.integer:\n        if (/^[+-]?\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.decimal:\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.double:\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\n          return value;\n        break;\n      }\n    }\n\n    // Write a regular datatyped literal\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    switch (object.termType) {\n    case 'Quad':\n      return this._encodeQuad(object);\n    case 'Literal':\n      return this._encodeLiteral(object);\n    default:\n      return this._encodeIriOrBlank(object);\n    }\n  }\n\n  // ### `_encodeQuad` encodes an RDF* quad\n  _encodeQuad({ subject, predicate, object, graph }) {\n    return `<<${\n      this._encodeSubject(subject)} ${\n      this._encodePredicate(predicate)} ${\n      this._encodeObject(object)}${\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined)\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function')\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    const prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    // Ignore prefixes if not supported by the serialization\n    if (!this._prefixIRIs)\n      return done && done();\n\n    // Write all new prefixes\n    let hasPrefixes = false;\n    for (let prefix in prefixes) {\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string')\n        iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = (prefix += ':');\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '', prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = IRIlist.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\n                                     `^(${IRIlist})([a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    let children = predicate, child, length;\n    // Empty blank node\n    if (predicate === undefined)\n      children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType)\n      children = [{ predicate: predicate, object: object }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate))\n      children = [predicate];\n\n    switch (length = children.length) {\n    // Generate an empty blank node\n    case 0:\n      return new SerializedTerm('[]');\n    // Generate a non-nested one-triple blank node\n    case 1:\n      child = children[0];\n      if (!(child.object instanceof SerializedTerm))\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\n                                  this._encodeObject(child.object)} ]`);\n    // Generate a multi-triple or nested blank node\n    default:\n      let contents = '[';\n      // Write all triples in order\n      for (let i = 0; i < length; i++) {\n        child = children[i];\n        // Write only the object is the predicate is the same as the previous\n        if (child.predicate.equals(predicate))\n          contents += `, ${this._encodeObject(child.object)}`;\n        // Otherwise, write the predicate and the object\n        else {\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\n                      this._encodePredicate(child.predicate)} ${\n                      this._encodeObject(child.object)}`;\n          predicate = child.predicate;\n        }\n      }\n      return new SerializedTerm(`${contents}\\n]`);\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    const length = elements && elements.length || 0, contents = new Array(length);\n    for (let i = 0; i < length; i++)\n      contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm(`(${contents.join(' ')})`);\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n","// **N3Store** objects store N3 quads by graph in memory.\nimport { default as N3DataFactory, termToId, termFromId } from './N3DataFactory';\nimport { Readable } from 'readable-stream';\nimport namespaces from './IRIs';\n\n// ## Constructor\nexport default class N3Store {\n  constructor(quads, options) {\n    // The number of quads is initially zero\n    this._size = 0;\n    // `_graphs` contains subject, predicate, and object indexes per graph\n    this._graphs = Object.create(null);\n    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,\n    // saving memory by using only numbers as keys in `_graphs`\n    this._id = 0;\n    this._ids = Object.create(null);\n    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero\n    this._entities = Object.create(null); // inverse of `_ids`\n    // `_blankNodeIndex` is the index of the last automatically named blank node\n    this._blankNodeIndex = 0;\n\n    // Shift parameters if `quads` is not given\n    if (!options && quads && !quads[0])\n      options = quads, quads = null;\n    options = options || {};\n    this._factory = options.factory || N3DataFactory;\n\n    // Add quads if passed\n    if (quads)\n      this.addQuads(quads);\n  }\n\n  // ## Public properties\n\n  // ### `size` returns the number of quads in the store\n  get size() {\n    // Return the quad count if if was cached\n    let size = this._size;\n    if (size !== null)\n      return size;\n\n    // Calculate the number of quads by counting to the deepest level\n    size = 0;\n    const graphs = this._graphs;\n    let subjects, subject;\n    for (const graphKey in graphs)\n      for (const subjectKey in (subjects = graphs[graphKey].subjects))\n        for (const predicateKey in (subject = subjects[subjectKey]))\n          size += Object.keys(subject[predicateKey]).length;\n    return this._size = size;\n  }\n\n  // ## Private methods\n\n  // ### `_addToIndex` adds a quad to a three-layered index.\n  // Returns if the index has changed, if the entry did not already exist.\n  _addToIndex(index0, key0, key1, key2) {\n    // Create layers as necessary\n    const index1 = index0[key0] || (index0[key0] = {});\n    const index2 = index1[key1] || (index1[key1] = {});\n    // Setting the key to _any_ value signals the presence of the quad\n    const existed = key2 in index2;\n    if (!existed)\n      index2[key2] = null;\n    return !existed;\n  }\n\n  // ### `_removeFromIndex` removes a quad from a three-layered index\n  _removeFromIndex(index0, key0, key1, key2) {\n    // Remove the quad from the index\n    const index1 = index0[key0], index2 = index1[key1];\n    delete index2[key2];\n\n    // Remove intermediary index layers if they are empty\n    for (const key in index2) return;\n    delete index1[key1];\n    for (const key in index1) return;\n    delete index0[key0];\n  }\n\n  // ### `_findInIndex` finds a set of quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  // `name0`, `name1`, and `name2` are the names of the keys at each level,\n  // used when reconstructing the resulting quad\n  // (for instance: _subject_, _predicate_, and _object_).\n  // Finally, `graph` will be the graph of the created quads.\n  // If `callback` is given, each result is passed through it\n  // and iteration halts when it returns truthy for any quad.\n  // If instead `array` is given, each result is added to the array.\n  _findInIndex(index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {\n    let tmp, index1, index2;\n    // Depending on the number of variables, keys or reverse index are faster\n    const varCount = !key0 + !key1 + !key2,\n        entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities;\n\n    // If a key is specified, use only that part of index 0.\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      const entity0 = entityKeys[value0];\n\n      if (index1 = index0[value0]) {\n        // If a key is specified, use only that part of index 1.\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          const entity1 = entityKeys[value1];\n\n          if (index2 = index1[value1]) {\n            // If a key is specified, use only that part of index 2, if it exists.\n            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);\n            // Create quads for all items found in index 2.\n            for (let l = 0; l < values.length; l++) {\n              const parts = { subject: null, predicate: null, object: null };\n              parts[name0] = termFromId(entity0, this._factory);\n              parts[name1] = termFromId(entity1, this._factory);\n              parts[name2] = termFromId(entityKeys[values[l]], this._factory);\n              const quad = this._factory.quad(\n                parts.subject, parts.predicate, parts.object, termFromId(graph, this._factory));\n              if (array)\n                array.push(quad);\n              else if (callback(quad))\n                return true;\n            }\n          }\n        }\n      }\n    }\n    return array;\n  }\n\n  // ### `_loop` executes the callback on all keys of index 0\n  _loop(index0, callback) {\n    for (const key0 in index0)\n      callback(key0);\n  }\n\n  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0\n  _loopByKey0(index0, key0, callback) {\n    let index1, key1;\n    if (index1 = index0[key0]) {\n      for (key1 in index1)\n        callback(key1);\n    }\n  }\n\n  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0\n  _loopByKey1(index0, key1, callback) {\n    let key0, index1;\n    for (key0 in index0) {\n      index1 = index0[key0];\n      if (index1[key1])\n        callback(key0);\n    }\n  }\n\n  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2\n  _loopBy2Keys(index0, key0, key1, callback) {\n    let index1, index2, key2;\n    if ((index1 = index0[key0]) && (index2 = index1[key1])) {\n      for (key2 in index2)\n        callback(key2);\n    }\n  }\n\n  // ### `_countInIndex` counts matching quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  _countInIndex(index0, key0, key1, key2) {\n    let count = 0, tmp, index1, index2;\n\n    // If a key is specified, count only that part of index 0\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      if (index1 = index0[value0]) {\n        // If a key is specified, count only that part of index 1\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          if (index2 = index1[value1]) {\n            // If a key is specified, count the quad if it exists\n            if (key2) (key2 in index2) && count++;\n            // Otherwise, count all quads\n            else count += Object.keys(index2).length;\n          }\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `_getGraphs` returns an array with the given graph,\n  // or all graphs if the argument is null or undefined.\n  _getGraphs(graph) {\n    if (!isString(graph))\n      return this._graphs;\n    const graphs = {};\n    graphs[graph] = this._graphs[graph];\n    return graphs;\n  }\n\n  // ### `_uniqueEntities` returns a function that accepts an entity ID\n  // and passes the corresponding entity to callback if it hasn't occurred before.\n  _uniqueEntities(callback) {\n    const uniqueIds = Object.create(null);\n    return id => {\n      if (!(id in uniqueIds)) {\n        uniqueIds[id] = true;\n        callback(termFromId(this._entities[id], this._factory));\n      }\n    };\n  }\n\n  // ## Public methods\n\n  // ### `addQuad` adds a new quad to the store.\n  // Returns if the quad index has changed, if the quad did not already exist.\n  addQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find the graph that will contain the triple\n    let graphItem = this._graphs[graph];\n    // Create the graph if it doesn't exist yet\n    if (!graphItem) {\n      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };\n      // Freezing a graph helps subsequent `add` performance,\n      // and properties will never be modified anyway\n      Object.freeze(graphItem);\n    }\n\n    // Since entities can often be long IRIs, we avoid storing them in every index.\n    // Instead, we have a separate index that maps entities to numbers,\n    // which are then used as keys in the other indexes.\n    const ids = this._ids;\n    const entities = this._entities;\n    subject   = ids[subject]   || (ids[entities[++this._id] = subject]   = this._id);\n    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);\n    object    = ids[object]    || (ids[entities[++this._id] = object]    = this._id);\n\n    const changed = this._addToIndex(graphItem.subjects,   subject,   predicate, object);\n    this._addToIndex(graphItem.predicates, predicate, object,    subject);\n    this._addToIndex(graphItem.objects,    object,    subject,   predicate);\n\n    // The cached quad count is now invalid\n    this._size = null;\n    return changed;\n  }\n\n  // ### `addQuads` adds multiple quads to the store\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `import` adds a stream of quads to the store\n  import(stream) {\n    stream.on('data', quad => { this.addQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeQuad` removes a quad from the store if it exists\n  removeQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find internal identifiers for all components\n    // and verify the quad exists.\n    const ids = this._ids, graphs = this._graphs;\n    let graphItem, subjects, predicates;\n    if (!(subject    = ids[subject]) || !(predicate = ids[predicate]) ||\n        !(object     = ids[object])  || !(graphItem = graphs[graph])  ||\n        !(subjects   = graphItem.subjects[subject]) ||\n        !(predicates = subjects[predicate]) ||\n        !(object in predicates))\n      return false;\n\n    // Remove it from all indexes\n    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);\n    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);\n    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);\n    if (this._size !== null) this._size--;\n\n    // Remove the graph if it is empty\n    for (subject in graphItem.subjects) return true;\n    delete graphs[graph];\n    return true;\n  }\n\n  // ### `removeQuads` removes multiple quads from the store\n  removeQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.removeQuad(quads[i]);\n  }\n\n  // ### `remove` removes a stream of quads from the store\n  remove(stream) {\n    stream.on('data', quad => { this.removeQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeMatches` removes all matching quads from the store\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  removeMatches(subject, predicate, object, graph) {\n    return this.remove(this.match(subject, predicate, object, graph));\n  }\n\n  // ### `deleteGraph` removes all triples with the given graph from the store\n  deleteGraph(graph) {\n    return this.removeMatches(null, null, null, graph);\n  }\n\n  // ### `getQuads` returns an array of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const quads = [], graphs = this._getGraphs(graph), ids = this._ids;\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return quads;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the object index will be the fastest\n            this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                              'object', 'subject', 'predicate', graphId, null, quads);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            this._findInIndex(content.subjects, subjectId, predicateId, null,\n                              'subject', 'predicate', 'object', graphId, null, quads);\n        }\n        else if (predicateId)\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          this._findInIndex(content.predicates, predicateId, objectId, null,\n                            'predicate', 'object', 'subject', graphId, null, quads);\n        else if (objectId)\n          // If only object is given, the object index will be the fastest\n          this._findInIndex(content.objects, objectId, null, null,\n                            'object', 'subject', 'predicate', graphId, null, quads);\n        else\n          // If nothing is given, iterate subjects and predicates first\n          this._findInIndex(content.subjects, null, null, null,\n                            'subject', 'predicate', 'object', graphId, null, quads);\n      }\n    }\n    return quads;\n  }\n\n  // ### `match` returns a stream of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  match(subject, predicate, object, graph) {\n    const stream = new Readable({ objectMode: true });\n\n    // Initialize stream once it is being read\n    stream._read = () => {\n      for (const quad of this.getQuads(subject, predicate, object, graph))\n        stream.push(quad);\n      stream.push(null);\n    };\n\n    return stream;\n  }\n\n  // ### `countQuads` returns the number of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  countQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let count = 0, content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return 0;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subject) {\n          if (object)\n            // If subject and object are given, the object index will be the fastest\n            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);\n        }\n        else if (predicate) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);\n        }\n        else {\n          // If only object is possibly given, the object index will be the fastest\n          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `forEach` executes the callback on all quads.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forEach(callback, subject, predicate, object, graph) {\n    this.some(quad => {\n      callback(quad);\n      return false;\n    }, subject, predicate, object, graph);\n  }\n\n  // ### `every` executes the callback on all quads,\n  // and returns `true` if it returns truthy for all them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  every(callback, subject, predicate, object, graph) {\n    let some = false;\n    const every = !this.some(quad => {\n      some = true;\n      return !callback(quad);\n    }, subject, predicate, object, graph);\n    return some && every;\n  }\n\n  // ### `some` executes the callback on all quads,\n  // and returns `true` if it returns truthy for any of them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  some(callback, subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return false;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId) {\n          // If subject and object are given, the object index will be the fastest\n            if (this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                                  'object', 'subject', 'predicate', graphId, callback, null))\n              return true;\n          }\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            if (this._findInIndex(content.subjects, subjectId, predicateId, null,\n                                  'subject', 'predicate', 'object', graphId, callback, null))\n              return true;\n        }\n        else if (predicateId) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          if (this._findInIndex(content.predicates, predicateId, objectId, null,\n                                'predicate', 'object', 'subject', graphId, callback, null)) {\n            return true;\n          }\n        }\n        else if (objectId) {\n          // If only object is given, the object index will be the fastest\n          if (this._findInIndex(content.objects, objectId, null, null,\n                                'object', 'subject', 'predicate', graphId, callback, null)) {\n            return true;\n          }\n        }\n        else\n        // If nothing is given, iterate subjects and predicates first\n        if (this._findInIndex(content.subjects, null, null, null,\n                              'subject', 'predicate', 'object', graphId, callback, null)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // ### `getSubjects` returns all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getSubjects(predicate, object, graph) {\n    const results = [];\n    this.forSubjects(s => { results.push(s); }, predicate, object, graph);\n    return results;\n  }\n\n  // ### `forSubjects` executes the callback on all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forSubjects(callback, predicate, object, graph) {\n    // Convert terms to internal string representation\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, predicateId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (predicateId) {\n          if (objectId)\n            // If predicate and object are given, the POS index is best.\n            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);\n          else\n            // If only predicate is given, the SPO index is best.\n            this._loopByKey1(content.subjects, predicateId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the OSP index is best.\n          this._loopByKey0(content.objects, objectId, callback);\n        else\n          // If no params given, iterate all the subjects\n          this._loop(content.subjects, callback);\n      }\n    }\n  }\n\n  // ### `getPredicates` returns all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getPredicates(subject, object, graph) {\n    const results = [];\n    this.forPredicates(p => { results.push(p); }, subject, object, graph);\n    return results;\n  }\n\n  // ### `forPredicates` executes the callback on all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forPredicates(callback, subject, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject) && !(subjectId = ids[subject]) ||\n        isString(object)  && !(objectId  = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the OSP index is best.\n            this._loopBy2Keys(content.objects, objectId, subjectId, callback);\n          else\n            // If only subject is given, the SPO index is best.\n            this._loopByKey0(content.subjects, subjectId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the POS index is best.\n          this._loopByKey1(content.predicates, objectId, callback);\n        else\n          // If no params given, iterate all the predicates.\n          this._loop(content.predicates, callback);\n      }\n    }\n  }\n\n  // ### `getObjects` returns all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getObjects(subject, predicate, graph) {\n    const results = [];\n    this.forObjects(o => { results.push(o); }, subject, predicate, graph);\n    return results;\n  }\n\n  // ### `forObjects` executes the callback on all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forObjects(callback, subject, predicate, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, predicateId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject]) ||\n        isString(predicate) && !(predicateId = ids[predicate]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (predicateId)\n            // If subject and predicate are given, the SPO index is best.\n            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);\n          else\n            // If only subject is given, the OSP index is best.\n            this._loopByKey1(content.objects, subjectId, callback);\n        }\n        else if (predicateId)\n          // If only predicate is given, the POS index is best.\n          this._loopByKey0(content.predicates, predicateId, callback);\n        else\n          // If no params given, iterate all the objects.\n          this._loop(content.objects, callback);\n      }\n    }\n  }\n\n  // ### `getGraphs` returns all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getGraphs(subject, predicate, object) {\n    const results = [];\n    this.forGraphs(g => { results.push(g); }, subject, predicate, object);\n    return results;\n  }\n\n  // ### `forGraphs` executes the callback on all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forGraphs(callback, subject, predicate, object) {\n    for (const graph in this._graphs) {\n      this.some(quad => {\n        callback(quad.graph);\n        return true; // Halt iteration of some()\n      }, subject, predicate, object, graph);\n    }\n  }\n\n  // ### `createBlankNode` creates a new blank node, returning its name\n  createBlankNode(suggestedName) {\n    let name, index;\n    // Generate a name based on the suggested name\n    if (suggestedName) {\n      name = suggestedName = `_:${suggestedName}`, index = 1;\n      while (this._ids[name])\n        name = suggestedName + index++;\n    }\n    // Generate a generic blank node name\n    else {\n      do { name = `_:b${this._blankNodeIndex++}`; }\n      while (this._ids[name]);\n    }\n    // Add the blank node to the entities, avoiding the generation of duplicates\n    this._ids[name] = ++this._id;\n    this._entities[this._id] = name;\n    return this._factory.blankNode(name.substr(2));\n  }\n\n  // ### `extractLists` finds and removes all list triples\n  // and returns the items per list.\n  extractLists({ remove = false, ignoreErrors = false } = {}) {\n    const lists = {}; // has scalar keys so could be a simple Object\n    const onError = ignoreErrors ? (() => true) :\n                  ((node, message) => { throw new Error(`${node.value} ${message}`); });\n\n    // Traverse each list from its tail\n    const tails = this.getQuads(null, namespaces.rdf.rest, namespaces.rdf.nil, null);\n    const toRemove = remove ? [...tails] : [];\n    tails.forEach(tailQuad => {\n      const items = [];             // the members found as objects of rdf:first quads\n      let malformed = false;      // signals whether the current list is malformed\n      let head;                   // the head of the list (_:b1 in above example)\n      let headPos;                // set to subject or object when head is set\n      const graph = tailQuad.graph; // make sure list is in exactly one graph\n\n      // Traverse the list from tail to end\n      let current = tailQuad.subject;\n      while (current && !malformed) {\n        const objectQuads = this.getQuads(null, null, current, null);\n        const subjectQuads = this.getQuads(current, null, null, null);\n        let quad, first = null, rest = null, parent = null;\n\n        // Find the first and rest of this list node\n        for (let i = 0; i < subjectQuads.length && !malformed; i++) {\n          quad = subjectQuads[i];\n          if (!quad.graph.equals(graph))\n            malformed = onError(current, 'not confined to single graph');\n          else if (head)\n            malformed = onError(current, 'has non-list arcs out');\n\n          // one rdf:first\n          else if (quad.predicate.value === namespaces.rdf.first) {\n            if (first)\n              malformed = onError(current, 'has multiple rdf:first arcs');\n            else\n              toRemove.push(first = quad);\n          }\n\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (rest)\n              malformed = onError(current, 'has multiple rdf:rest arcs');\n            else\n              toRemove.push(rest = quad);\n          }\n\n          // alien triple\n          else if (objectQuads.length)\n            malformed = onError(current, 'can\\'t be subject and object');\n          else {\n            head = quad; // e.g. { (1 2 3) :p :o }\n            headPos = 'subject';\n          }\n        }\n\n        // { :s :p (1 2) } arrives here with no head\n        // { (1 2) :p :o } arrives here with head set to the list.\n        for (let i = 0; i < objectQuads.length && !malformed; ++i) {\n          quad = objectQuads[i];\n          if (head)\n            malformed = onError(current, 'can\\'t have coreferences');\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (parent)\n              malformed = onError(current, 'has incoming rdf:rest arcs');\n            else\n              parent = quad;\n          }\n          else {\n            head = quad; // e.g. { :s :p (1 2) }\n            headPos = 'object';\n          }\n        }\n\n        // Store the list item and continue with parent\n        if (!first)\n          malformed = onError(current, 'has no list head');\n        else\n          items.unshift(first.object);\n        current = parent && parent.subject;\n      }\n\n      // Don't remove any quads if the list is malformed\n      if (malformed)\n        remove = false;\n      // Store the list under the value of its head\n      else if (head)\n        lists[head[headPos].value] = items;\n    });\n\n    // Remove list quads if requested\n    if (remove)\n      this.removeQuads(toRemove);\n    return lists;\n  }\n}\n\n// Determines whether the argument is a string\nfunction isString(s) {\n  return typeof s === 'string' || s instanceof String;\n}\n","// **N3StreamParser** parses a text stream into a quad stream.\nimport N3Parser from './N3Parser';\nimport { Transform } from 'readable-stream';\n\n// ## Constructor\nexport default class N3StreamParser extends Transform {\n  constructor(options) {\n    super({ decodeStrings: true });\n    this._readableState.objectMode = true;\n\n    // Set up parser with dummy stream to obtain `data` and `end` callbacks\n    const parser = new N3Parser(options);\n    let onData, onEnd;\n    parser.parse({\n      on: (event, callback) => {\n        switch (event) {\n        case 'data': onData = callback; break;\n        case 'end':   onEnd = callback; break;\n        }\n      },\n    },\n      // Handle quads by pushing them down the pipeline\n      (error, quad) => { error && this.emit('error', error) || quad && this.push(quad); },\n      // Emit prefixes through the `prefix` event\n      (prefix, uri) => { this.emit('prefix', prefix, uri); }\n    );\n\n    // Implement Transform methods through parser callbacks\n    this._transform = (chunk, encoding, done) => { onData(chunk); done(); };\n    this._flush = done => { onEnd(); done(); };\n  }\n\n  // ### Parses a stream of strings\n  import(stream) {\n    stream.on('data',  chunk => { this.write(chunk); });\n    stream.on('end',   ()      => { this.end(); });\n    stream.on('error', error => { this.emit('error', error); });\n    return this;\n  }\n}\n","// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer';\n\n// ## Constructor\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({ encoding: 'utf8', writableObjectMode: true });\n\n    // Set up writer with a dummy stream object\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\n      end: callback => { this.push(null); callback && callback(); },\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\n    this._flush = done => { writer.end(done); };\n  }\n\n// ### Serializes a stream of quads\n  import(stream) {\n    stream.on('data',   quad => { this.write(quad); });\n    stream.on('end',    () => { this.end(); });\n    stream.on('error',  error => { this.emit('error', error); });\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\n    return this;\n  }\n}\n","import Lexer from './N3Lexer';\nimport Parser from './N3Parser';\nimport Writer from './N3Writer';\nimport Store from './N3Store';\nimport StreamParser from './N3StreamParser';\nimport StreamWriter from './N3StreamWriter';\nimport * as Util from './N3Util';\n\nimport {\n  default as DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n} from './N3DataFactory';\n\nexport {\n  Lexer,\n  Parser,\n  Writer,\n  Store,\n  StreamParser,\n  StreamWriter,\n  Util,\n\n  DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n};\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}